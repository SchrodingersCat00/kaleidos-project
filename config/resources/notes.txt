Enum 'Beleidsdomein': ext:BeleidsdomeinCode as well as skos:Concept (cfr lblod/loket). Maintaining both classes is no problem as these resources are read-only.
```
<http://data.vlaanderen.be/id/concept/BeleidsdomeinCode/5ab10d3a4c934f28dc000029> a <http://www.w3.org/2004/02/skos/core#Concept>,
     <http://mu.semte.ch/vocabularies/ext/BeleidsdomeinCode>;
   <http://mu.semte.ch/vocabularies/core/uuid> "5ab10d3a4c934f28dc000029";
   <http://www.w3.org/2004/02/skos/core#prefLabel> "Algemeen beleid";
   <http://www.w3.org/2004/02/skos/core#topConceptOf> <http://data.vlaanderen.be/id/conceptscheme/BeleidsdomeinCode> .
```

Enum 'Bevoegdheid': ext:BevoegdheidCode as well as skos:Concept. Maintaining both classes is no problem as these resources are read-only. Relation from  Mandataris to BevoegdheidCode via ext:bevoegdheid

Enum 'ConsultatieTypeCode': ext:ConsultatieTypeCode as well as skos:Concept. Maintaining both classes is no problem as these resources are read-only.

Enum 'Consultatie-uitkomstCode':  ext:Consultatie-uitkomstCode as well as skos:Concept. Maintaining both classes is no problem as these resources are read-only.

Enum 'DocumentTypeCode':  ext:DocumentTypeCode as well as skos:Concept. Maintaining both classes is no problem as these resources are read-only. Relation to parent code and child code (inverse) via skos:broader

Enum 'CaseTypeCode': ext:DossierTypeCode as well as skos:Concept. Maintaining both classes is no problem as these resources are read-only.

Enum 'MediaTypeCode': ext:MediaTypeCode as well as dcterms:Mediatype. Maintaining both classes is no problem as these resources are read-only. Not sure if as dcterms:Mediatype is the right approach (cfr types used in mu-file-service)